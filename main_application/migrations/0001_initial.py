# Generated by Django 5.2.4 on 2025-10-14 10:24

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('user_type', models.CharField(choices=[('STUDENT', 'Student'), ('LECTURER', 'Lecturer'), ('COD', 'Chairman of Department'), ('DEAN', 'Dean'), ('ICT_ADMIN', 'ICT Administrator')], max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('is_active_user', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_code', models.CharField(max_length=20, unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'academic_years',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('venue_type', models.CharField(choices=[('LECTURE_HALL', 'Lecture Hall'), ('TUTORIAL_ROOM', 'Tutorial Room'), ('LAB', 'Laboratory'), ('SEMINAR_ROOM', 'Seminar Room')], max_length=20)),
                ('capacity', models.IntegerField()),
                ('building', models.CharField(max_length=100)),
                ('floor', models.CharField(blank=True, max_length=20)),
                ('has_projector', models.BooleanField(default=False)),
                ('has_computers', models.BooleanField(default=False)),
                ('is_available', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'venues',
                'ordering': ['building', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Lecturer',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='lecturer_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('staff_number', models.CharField(max_length=50, unique=True)),
                ('specialization', models.CharField(blank=True, max_length=200)),
                ('office_location', models.CharField(blank=True, max_length=100)),
                ('consultation_hours', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'lecturers',
                'ordering': ['staff_number'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='student_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('registration_number', models.CharField(max_length=50, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('surname', models.CharField(blank=True, max_length=30)),
                ('current_year', models.IntegerField(choices=[(1, 'Year 1'), (2, 'Year 2'), (3, 'Year 3'), (4, 'Year 4')])),
                ('admission_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('can_upgrade', models.BooleanField(default=False)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('parent_name', models.CharField(blank=True, max_length=100, null=True)),
                ('parent_phone', models.CharField(blank=True, max_length=15, null=True)),
                ('guardian_name', models.CharField(blank=True, max_length=100, null=True)),
                ('guardian_phone', models.CharField(blank=True, max_length=15, null=True)),
            ],
            options={
                'db_table': 'students',
                'ordering': ['registration_number'],
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('head_of_department', models.ForeignKey(blank=True, limit_choices_to={'user_type': 'COD'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='headed_departments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'departments',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Intake',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('intake_type', models.CharField(choices=[('SEPTEMBER', 'September Intake'), ('JANUARY', 'January Intake'), ('MAY', 'May Intake')], max_length=20)),
                ('intake_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intakes', to='main_application.academicyear')),
            ],
            options={
                'db_table': 'intakes',
                'ordering': ['-intake_date'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=200)),
                ('body', models.TextField()),
                ('message_type', models.CharField(choices=[('DIRECT', 'Direct Message'), ('BROADCAST', 'Broadcast')], default='DIRECT', max_length=20)),
                ('attachments', models.FileField(blank=True, null=True, upload_to='messages/')),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('parent_message', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='main_application.message')),
                ('recipients', models.ManyToManyField(related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'messages',
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='Programme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('level', models.CharField(choices=[('CERTIFICATE', 'Certificate'), ('DIPLOMA', 'Diploma'), ('BACHELORS', "Bachelor's Degree"), ('MASTERS', "Master's Degree"), ('PHD', 'Doctor of Philosophy')], max_length=20)),
                ('duration_years', models.IntegerField(choices=[(1, '1 Year'), (2, '2 Years'), (3, '3 Years'), (4, '4 Years'), (5, '5 Years')])),
                ('semesters_per_year', models.IntegerField(choices=[(2, '2 Semesters'), (3, '3 Semesters')], default=2)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programmes', to='main_application.department')),
            ],
            options={
                'db_table': 'programmes',
                'ordering': ['level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='FeeStructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_level', models.IntegerField(choices=[(1, 'Year 1'), (2, 'Year 2'), (3, 'Year 3'), (4, 'Year 4')])),
                ('tuition_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('examination_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('registration_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('other_fees', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_structures', to='main_application.academicyear')),
                ('programme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_structures', to='main_application.programme')),
            ],
            options={
                'db_table': 'fee_structures',
                'ordering': ['programme', 'year_level'],
                'unique_together': {('programme', 'academic_year', 'year_level')},
            },
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('target_year_levels', models.CharField(blank=True, max_length=50)),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('NORMAL', 'Normal'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='NORMAL', max_length=20)),
                ('publish_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
                ('is_published', models.BooleanField(default=True)),
                ('attachments', models.FileField(blank=True, null=True, upload_to='announcements/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_announcements', to=settings.AUTH_USER_MODEL)),
                ('target_programmes', models.ManyToManyField(blank=True, related_name='announcements', to='main_application.programme')),
            ],
            options={
                'db_table': 'announcements',
                'ordering': ['-publish_date'],
            },
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester_number', models.IntegerField(choices=[(1, 'Semester 1'), (2, 'Semester 2'), (3, 'Semester 3')])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False)),
                ('registration_deadline', models.DateField()),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='semesters', to='main_application.academicyear')),
            ],
            options={
                'db_table': 'semesters',
                'ordering': ['-academic_year', 'semester_number'],
                'unique_together': {('academic_year', 'semester_number')},
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('credit_hours', models.IntegerField(default=3)),
                ('is_core', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='units', to='main_application.department')),
                ('prerequisites', models.ManyToManyField(blank=True, related_name='required_for', to='main_application.unit')),
            ],
            options={
                'db_table': 'units',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='AssessmentComponent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('component_type', models.CharField(choices=[('CAT', 'Continuous Assessment Test'), ('ASSIGNMENT', 'Assignment'), ('PROJECT', 'Project'), ('EXAM', 'Final Examination'), ('PRACTICAL', 'Practical')], max_length=20)),
                ('weight_percentage', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('max_marks', models.DecimalField(decimal_places=2, default=100, max_digits=5)),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_components', to='main_application.unit')),
            ],
            options={
                'db_table': 'assessment_components',
                'ordering': ['unit', 'component_type'],
            },
        ),
        migrations.CreateModel(
            name='UnitAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('allocated_date', models.DateTimeField(auto_now_add=True)),
                ('programmes', models.ManyToManyField(related_name='unit_allocations', to='main_application.programme')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_allocations', to='main_application.semester')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='main_application.unit')),
                ('lecturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_allocations', to='main_application.lecturer')),
            ],
            options={
                'db_table': 'unit_allocations',
                'ordering': ['-allocated_date'],
                'unique_together': {('unit', 'lecturer', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='UnitEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('ENROLLED', 'Enrolled'), ('DROPPED', 'Dropped'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='ENROLLED', max_length=20)),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='main_application.semester')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='main_application.unit')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='main_application.student')),
            ],
            options={
                'db_table': 'unit_enrollments',
                'ordering': ['-enrollment_date'],
                'unique_together': {('student', 'unit', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='TimetableSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('MONDAY', 'Monday'), ('TUESDAY', 'Tuesday'), ('WEDNESDAY', 'Wednesday'), ('THURSDAY', 'Thursday'), ('FRIDAY', 'Friday'), ('SATURDAY', 'Saturday')], max_length=20)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('year_level', models.IntegerField(choices=[(1, 'Year 1'), (2, 'Year 2'), (3, 'Year 3'), (4, 'Year 4')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_timetables', to=settings.AUTH_USER_MODEL)),
                ('programme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable_slots', to='main_application.programme')),
                ('unit_allocation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable_slots', to='main_application.unitallocation')),
                ('venue', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='timetable_slots', to='main_application.venue')),
            ],
            options={
                'db_table': 'timetable_slots',
                'ordering': ['day_of_week', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('event_type', models.CharField(choices=[('SEMINAR', 'Seminar'), ('WORKSHOP', 'Workshop'), ('CONFERENCE', 'Conference'), ('MEETING', 'Meeting'), ('ORIENTATION', 'Orientation'), ('EXAMINATION', 'Examination'), ('OTHER', 'Other')], max_length=20)),
                ('event_date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_mandatory', models.BooleanField(default=False)),
                ('registration_required', models.BooleanField(default=False)),
                ('max_attendees', models.IntegerField(blank=True, null=True)),
                ('poster', models.ImageField(blank=True, null=True, upload_to='events/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='organized_events', to=settings.AUTH_USER_MODEL)),
                ('target_programmes', models.ManyToManyField(blank=True, related_name='events', to='main_application.programme')),
                ('venue', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='main_application.venue')),
            ],
            options={
                'db_table': 'events',
                'ordering': ['-event_date', '-start_time'],
            },
        ),
        migrations.AddField(
            model_name='lecturer',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='lecturers', to='main_application.department'),
        ),
        migrations.CreateModel(
            name='FinalGrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_marks', models.DecimalField(decimal_places=2, max_digits=5)),
                ('grade', models.CharField(max_length=5)),
                ('grade_point', models.DecimalField(decimal_places=2, max_digits=3)),
                ('computed_date', models.DateTimeField(auto_now=True)),
                ('is_approved', models.BooleanField(default=False)),
                ('enrollment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='final_grade', to='main_application.unitenrollment')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='approved_grades', to='main_application.lecturer')),
            ],
            options={
                'db_table': 'final_grades',
                'ordering': ['-computed_date'],
            },
        ),
        migrations.CreateModel(
            name='StudentProgression',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completion_date', models.DateField()),
                ('upgrade_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('from_programme', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='graduated_students', to='main_application.programme')),
                ('to_programme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='upgraded_students', to='main_application.programme')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progressions', to='main_application.student')),
            ],
            options={
                'db_table': 'student_progressions',
                'ordering': ['-completion_date'],
            },
        ),
        migrations.AddField(
            model_name='student',
            name='intake',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='students', to='main_application.intake'),
        ),
        migrations.AddField(
            model_name='student',
            name='programme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='students', to='main_application.programme'),
        ),
        migrations.CreateModel(
            name='FeePayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateField()),
                ('receipt_number', models.CharField(max_length=100, unique=True)),
                ('payment_method', models.CharField(max_length=50)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PARTIAL', 'Partially Paid'), ('COMPLETE', 'Fully Paid'), ('OVERPAID', 'Overpaid')], max_length=20)),
                ('balance', models.DecimalField(decimal_places=2, max_digits=10)),
                ('fee_structure', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='main_application.feestructure')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_payments', to='main_application.semester')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_payments', to='main_application.student')),
            ],
            options={
                'db_table': 'fee_payments',
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='MessageReadStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='read_statuses', to='main_application.message')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message_read_statuses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'message_read_statuses',
                'unique_together': {('message', 'recipient')},
            },
        ),
        migrations.CreateModel(
            name='GradingScheme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.CharField(max_length=5)),
                ('min_marks', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('max_marks', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('grade_point', models.DecimalField(decimal_places=2, max_digits=3)),
                ('description', models.CharField(max_length=50)),
                ('programme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grading_schemes', to='main_application.programme')),
            ],
            options={
                'db_table': 'grading_schemes',
                'ordering': ['programme', '-min_marks'],
                'unique_together': {('programme', 'grade')},
            },
        ),
        migrations.CreateModel(
            name='ProgrammeUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_level', models.IntegerField(choices=[(1, 'Year 1'), (2, 'Year 2'), (3, 'Year 3'), (4, 'Year 4')])),
                ('semester', models.IntegerField(choices=[(1, 'Semester 1'), (2, 'Semester 2'), (3, 'Semester 3')])),
                ('is_mandatory', models.BooleanField(default=True)),
                ('programme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programme_units', to='main_application.programme')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offered_in_programmes', to='main_application.unit')),
            ],
            options={
                'db_table': 'programme_units',
                'ordering': ['programme', 'year_level', 'semester'],
                'unique_together': {('programme', 'unit', 'year_level', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='StudentMarks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marks_obtained', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('entry_date', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remarks', models.TextField(blank=True)),
                ('assessment_component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_marks', to='main_application.assessmentcomponent')),
                ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='marks', to='main_application.unitenrollment')),
                ('entered_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='entered_marks', to='main_application.lecturer')),
            ],
            options={
                'db_table': 'student_marks',
                'ordering': ['-entry_date'],
                'unique_together': {('enrollment', 'assessment_component')},
            },
        ),
        migrations.CreateModel(
            name='SemesterRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('REGISTERED', 'Registered'), ('DEFERRED', 'Deferred'), ('WITHDRAWN', 'Withdrawn')], default='REGISTERED', max_length=20)),
                ('units_enrolled', models.IntegerField(default=0)),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='main_application.semester')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='semester_registrations', to='main_application.student')),
            ],
            options={
                'db_table': 'semester_registrations',
                'ordering': ['-registration_date'],
                'unique_together': {('student', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='FeeStatement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_billed', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('balance', models.DecimalField(decimal_places=2, max_digits=10)),
                ('can_register', models.BooleanField(default=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_statements', to='main_application.semester')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_statements', to='main_application.student')),
            ],
            options={
                'db_table': 'fee_statements',
                'ordering': ['-semester'],
                'unique_together': {('student', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('attended', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='main_application.event')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_registrations', to='main_application.student')),
            ],
            options={
                'db_table': 'event_registrations',
                'ordering': ['-registration_date'],
                'unique_together': {('event', 'student')},
            },
        ),
    ]
