# Generated by Django 5.2.4 on 2025-10-19 00:38

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main_application', '0003_dataexportlog_systemsettings_auditlog_blockedip_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChatbotAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True, unique=True)),
                ('total_conversations', models.IntegerField(default=0)),
                ('total_messages', models.IntegerField(default=0)),
                ('unique_users', models.IntegerField(default=0)),
                ('academic_conversations', models.IntegerField(default=0)),
                ('mental_health_conversations', models.IntegerField(default=0)),
                ('general_conversations', models.IntegerField(default=0)),
                ('positive_sentiment_count', models.IntegerField(default=0)),
                ('neutral_sentiment_count', models.IntegerField(default=0)),
                ('negative_sentiment_count', models.IntegerField(default=0)),
                ('crisis_detected_count', models.IntegerField(default=0)),
                ('avg_response_time', models.FloatField(default=0.0)),
                ('avg_satisfaction_rating', models.FloatField(blank=True, null=True)),
                ('escalated_conversations', models.IntegerField(default=0)),
                ('total_tokens_used', models.IntegerField(default=0)),
                ('avg_confidence_score', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'chatbot_analytics',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='ChatbotIntent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intent_name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('category', models.CharField(max_length=50)),
                ('training_phrases', models.JSONField(default=list)),
                ('response_templates', models.JSONField(default=list)),
                ('parameters', models.JSONField(default=list)),
                ('action_type', models.CharField(blank=True, max_length=100)),
                ('requires_authentication', models.BooleanField(default=False)),
                ('priority', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('times_detected', models.IntegerField(default=0)),
                ('accuracy_score', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'chatbot_intents',
                'ordering': ['-priority', 'intent_name'],
            },
        ),
        migrations.CreateModel(
            name='ChatbotConversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conversation_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('conversation_type', models.CharField(choices=[('ACADEMIC', 'Academic Support'), ('MENTAL_HEALTH', 'Mental Health Support'), ('GENERAL', 'General Inquiry'), ('REGISTRATION', 'Registration Help'), ('FEES', 'Fees Inquiry'), ('GRADES', 'Grades Inquiry'), ('TIMETABLE', 'Timetable Inquiry'), ('CAREER', 'Career Guidance'), ('EMERGENCY', 'Emergency/Crisis')], default='GENERAL', max_length=20)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('CLOSED', 'Closed'), ('ESCALATED', 'Escalated to Human'), ('ARCHIVED', 'Archived')], default='ACTIVE', max_length=20)),
                ('overall_sentiment', models.CharField(choices=[('POSITIVE', 'Positive'), ('NEUTRAL', 'Neutral'), ('NEGATIVE', 'Negative'), ('CRISIS', 'Crisis - Needs Immediate Attention')], default='NEUTRAL', max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('last_message_at', models.DateTimeField(auto_now=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('total_messages', models.IntegerField(default=0)),
                ('ai_responses', models.IntegerField(default=0)),
                ('user_messages', models.IntegerField(default=0)),
                ('avg_response_time_seconds', models.FloatField(default=0.0)),
                ('escalated', models.BooleanField(default=False)),
                ('escalated_at', models.DateTimeField(blank=True, null=True)),
                ('escalation_reason', models.TextField(blank=True)),
                ('user_satisfaction', models.IntegerField(blank=True, help_text='1-5 rating', null=True)),
                ('user_feedback', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('device_type', models.CharField(blank=True, max_length=50)),
                ('escalated_to', models.ForeignKey(blank=True, limit_choices_to={'user_type__in': ['DEAN', 'COD', 'ICT_ADMIN']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='escalated_chats', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chat_conversations', to='main_application.student')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatbot_conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'chatbot_conversations',
                'ordering': ['-last_message_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatbotKnowledgeBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kb_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('category', models.CharField(choices=[('ACADEMIC', 'Academic'), ('MENTAL_HEALTH', 'Mental Health'), ('REGISTRATION', 'Registration'), ('FEES', 'Fees'), ('TIMETABLE', 'Timetable'), ('GENERAL', 'General'), ('FAQ', 'FAQ'), ('POLICY', 'Policy'), ('SUPPORT', 'Support Services')], max_length=20)),
                ('question', models.TextField()),
                ('answer', models.TextField()),
                ('keywords', models.JSONField(default=list)),
                ('similar_questions', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=0)),
                ('times_used', models.IntegerField(default=0)),
                ('helpful_count', models.IntegerField(default=0)),
                ('not_helpful_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('related_links', models.JSONField(default=list)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_kb_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'chatbot_knowledge_base',
                'ordering': ['-priority', 'category'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('message_type', models.CharField(choices=[('USER', 'User Message'), ('AI', 'AI Response'), ('SYSTEM', 'System Message'), ('HUMAN', 'Human Support')], max_length=10)),
                ('content', models.TextField()),
                ('processed_content', models.TextField(blank=True)),
                ('intent_detected', models.CharField(blank=True, max_length=100)),
                ('entities_extracted', models.JSONField(blank=True, null=True)),
                ('confidence_score', models.FloatField(blank=True, null=True)),
                ('sentiment', models.CharField(choices=[('POSITIVE', 'Positive'), ('NEUTRAL', 'Neutral'), ('NEGATIVE', 'Negative'), ('ANXIOUS', 'Anxious'), ('DEPRESSED', 'Depressed'), ('CRISIS', 'Crisis')], default='NEUTRAL', max_length=20)),
                ('sentiment_score', models.FloatField(blank=True, null=True)),
                ('emotion_scores', models.JSONField(blank=True, null=True)),
                ('is_crisis', models.BooleanField(default=False)),
                ('crisis_keywords', models.JSONField(blank=True, null=True)),
                ('crisis_level', models.CharField(blank=True, max_length=20)),
                ('response_time_seconds', models.FloatField(blank=True, null=True)),
                ('model_used', models.CharField(blank=True, max_length=100)),
                ('tokens_used', models.IntegerField(blank=True, null=True)),
                ('has_attachment', models.BooleanField(default=False)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='chatbot_attachments/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('was_helpful', models.BooleanField(blank=True, null=True)),
                ('feedback_text', models.TextField(blank=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='main_application.chatbotconversation')),
            ],
            options={
                'db_table': 'chat_messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatbotFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('feedback_type', models.CharField(choices=[('RATING', 'Rating'), ('BUG', 'Bug Report'), ('SUGGESTION', 'Suggestion'), ('COMPLAINT', 'Complaint'), ('PRAISE', 'Praise')], max_length=20)),
                ('rating', models.IntegerField(blank=True, null=True)),
                ('comment', models.TextField(blank=True)),
                ('what_worked', models.TextField(blank=True)),
                ('what_needs_improvement', models.TextField(blank=True)),
                ('sentiment', models.CharField(blank=True, max_length=20)),
                ('responded', models.BooleanField(default=False)),
                ('response_text', models.TextField(blank=True)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='main_application.chatbotconversation')),
                ('responded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='chatbot_feedback_responses', to=settings.AUTH_USER_MODEL)),
                ('message', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='main_application.chatmessage')),
            ],
            options={
                'db_table': 'chatbot_feedback',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CrisisAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('crisis_type', models.CharField(choices=[('SUICIDE', 'Suicidal Thoughts'), ('SELF_HARM', 'Self Harm'), ('SEVERE_DEPRESSION', 'Severe Depression'), ('PANIC', 'Panic Attack'), ('ABUSE', 'Abuse'), ('VIOLENCE', 'Violence'), ('EMERGENCY', 'Medical Emergency')], max_length=20)),
                ('severity', models.CharField(max_length=20)),
                ('detected_keywords', models.JSONField()),
                ('confidence', models.FloatField()),
                ('status', models.CharField(choices=[('DETECTED', 'Detected'), ('NOTIFIED', 'Authorities Notified'), ('IN_PROGRESS', 'Intervention in Progress'), ('RESOLVED', 'Resolved'), ('FALSE_ALARM', 'False Alarm')], default='DETECTED', max_length=20)),
                ('auto_response_sent', models.BooleanField(default=False)),
                ('auto_response_text', models.TextField(blank=True)),
                ('authorities_notified', models.BooleanField(default=False)),
                ('notification_sent_at', models.DateTimeField(blank=True, null=True)),
                ('intervention_notes', models.TextField(blank=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('emergency_contact_called', models.BooleanField(default=False)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crisis_alerts', to='main_application.chatbotconversation')),
                ('handled_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='handled_crisis_alerts', to=settings.AUTH_USER_MODEL)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crisis_alerts', to='main_application.chatmessage')),
                ('notified_users', models.ManyToManyField(blank=True, related_name='received_crisis_alerts', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crisis_alerts', to='main_application.student')),
            ],
            options={
                'db_table': 'crisis_alerts',
                'ordering': ['-detected_at'],
            },
        ),
        migrations.CreateModel(
            name='MentalHealthAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('assessment_type', models.CharField(choices=[('PHQ9', 'PHQ-9 (Depression)'), ('GAD7', 'GAD-7 (Anxiety)'), ('STRESS', 'Stress Assessment'), ('WELLBEING', 'General Wellbeing'), ('CRISIS', 'Crisis Assessment')], max_length=20)),
                ('score', models.IntegerField()),
                ('max_score', models.IntegerField()),
                ('risk_level', models.CharField(choices=[('MINIMAL', 'Minimal Risk'), ('MILD', 'Mild Risk'), ('MODERATE', 'Moderate Risk'), ('SEVERE', 'Severe Risk'), ('CRITICAL', 'Critical - Immediate Intervention')], max_length=20)),
                ('responses', models.JSONField()),
                ('interpretation', models.TextField()),
                ('recommendations', models.TextField()),
                ('requires_followup', models.BooleanField(default=False)),
                ('followup_date', models.DateField(blank=True, null=True)),
                ('followup_completed', models.BooleanField(default=False)),
                ('professional_referral_recommended', models.BooleanField(default=False)),
                ('referral_sent', models.BooleanField(default=False)),
                ('referral_type', models.CharField(blank=True, max_length=100)),
                ('assessed_at', models.DateTimeField(auto_now_add=True)),
                ('student_consented', models.BooleanField(default=True)),
                ('anonymous', models.BooleanField(default=False)),
                ('conversation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to='main_application.chatbotconversation')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mental_health_assessments', to='main_application.student')),
            ],
            options={
                'db_table': 'mental_health_assessments',
                'ordering': ['-assessed_at'],
            },
        ),
        migrations.AddIndex(
            model_name='chatbotconversation',
            index=models.Index(fields=['user', '-started_at'], name='chatbot_con_user_id_e75230_idx'),
        ),
        migrations.AddIndex(
            model_name='chatbotconversation',
            index=models.Index(fields=['status', '-started_at'], name='chatbot_con_status_03186d_idx'),
        ),
        migrations.AddIndex(
            model_name='chatbotconversation',
            index=models.Index(fields=['conversation_type', '-started_at'], name='chatbot_con_convers_d0caa8_idx'),
        ),
        migrations.AddIndex(
            model_name='chatbotconversation',
            index=models.Index(fields=['overall_sentiment', 'status'], name='chatbot_con_overall_1b3b0a_idx'),
        ),
        migrations.AddIndex(
            model_name='chatbotknowledgebase',
            index=models.Index(fields=['category', 'is_active'], name='chatbot_kno_categor_dd1b0d_idx'),
        ),
        migrations.AddIndex(
            model_name='chatbotknowledgebase',
            index=models.Index(fields=['-priority'], name='chatbot_kno_priorit_53806e_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['conversation', 'created_at'], name='chat_messag_convers_0a903c_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['message_type', 'created_at'], name='chat_messag_message_977880_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['is_crisis', '-created_at'], name='chat_messag_is_cris_58adf1_idx'),
        ),
        migrations.AddIndex(
            model_name='crisisalert',
            index=models.Index(fields=['student', '-detected_at'], name='crisis_aler_student_c4c642_idx'),
        ),
        migrations.AddIndex(
            model_name='crisisalert',
            index=models.Index(fields=['status', '-detected_at'], name='crisis_aler_status_87d8ee_idx'),
        ),
        migrations.AddIndex(
            model_name='crisisalert',
            index=models.Index(fields=['severity', 'status'], name='crisis_aler_severit_5a0e2d_idx'),
        ),
        migrations.AddIndex(
            model_name='mentalhealthassessment',
            index=models.Index(fields=['student', '-assessed_at'], name='mental_heal_student_a1474f_idx'),
        ),
        migrations.AddIndex(
            model_name='mentalhealthassessment',
            index=models.Index(fields=['risk_level', '-assessed_at'], name='mental_heal_risk_le_3cecb6_idx'),
        ),
        migrations.AddIndex(
            model_name='mentalhealthassessment',
            index=models.Index(fields=['requires_followup', 'followup_completed'], name='mental_heal_require_376dac_idx'),
        ),
    ]
